package ex01_inputStream;

import java.io.IOException;
import java.io.InputStream;

/*
 * 입출력 스트림 : 데이터의 이동통로. 단방향			추상클래스
 * 		입력스트림 : 바이트 => 바이트형 입력스트림 : InputStream
 * 													 1 byte 단위로 읽기.
 * 													 동영상, 이미지, 텍스트 등 읽기
 * 					 문자	=>	문자형 입력스트림  : Reader
 * 													 2 byte(1 char) 단위로 읽기
 * 													 텍스트 데이터 읽기
 * 
 * 		출력스트림 : 바이트 => 바이트형 출력스트림 : OutputStream
 * 													 1 byte 단위로 쓰기
 * 													 동영상, 이미지, 텍스트 등 읽기 
 * 					 문자	=>	문자형 입력스트림	: Writer
 * 													 2 byte(1 char) 단위로 쓰기
 * 													 텍스트 데이터 쓰기
 * 
 * InputStreamReader : "바이트형 입력 스트림"을 "문자형 입력 스트림"으로 변경. Reader 하위클래스
 * OutputStreamWriter : "바이트형 출력 스트림"을 "문자형 출력 스트림"으로 변경. Writer 하위클래스
 * 
 * 자바에서 제공되는 표준 입출력 스트림
 * 		표준 입력 스트림 : InputStream System.in => 키보드에서 입력
 * 		표준 출력 스트림 : PrintStream System.out => 콘솔(화면)으로 출력
 * 		표준 오류 스트림 : PrintStream System.err => 콘솔(화면)으로 출력 (빨강색으로 출력)
 */
public class InputStreamEx01 {
	public static void main(String[] args) throws IOException {
		InputStream in = System.in;
		int data = 0;
		// in.read() : 1 byte씩 읽기
		while( (data = in.read()) != -1 ) { // Ctrl+z (EOF)
			System.out.print((char)data);
		}
	}

}
package ex03_file;

import java.io.FileInputStream;
import java.io.IOException;

/*
 * FileInputStream : 파일의 내용을 읽어 화면에 출력
 * 
 * 주요 메서드
 * int read() : 1 byte 읽어서 내용 리턴
 * int read(byte[] buf) : buf 크기만큼 읽어서 내용 buf에 저장. 읽은 byte수 리턴
 * int read(byte[] buf, int start, int len) : buf[start] 부터 len만큼 내용 저장. 읽은 byte 수 리턴
 * int available() : 읽기 가능한 바이트 수 리턴
 * 
 */
public class FileInputStreamEx01 {
	public static void main(String[] args) throws IOException{
		FileInputStream fis = new FileInputStream("src/ex01_inputstream/InputStreamEx01.java");
		int data = 0;
		System.out.println("========= read() 이용해 읽기");
		while( (data = fis.read() ) != -1 ) {
			System.out.print((char)data);
		}
		
		
		System.out.println("========= read(byte[] buf) 이용해 읽기");
		fis = new FileInputStream("src/ex01_inputstream/InputStreamEx01.java");
		// fis.available() : 읽기 가능한 바이트 수
		byte[] buf = new byte[fis.available()]; System.out.println("fis.available() = " + fis.available());
		// fis.read(buf) : fis에서 buf만큼 읽은 내용을 buf 저장. 실제 읽은 크기 리턴
		//			data : 실제 읽은 바이트 수
		while( (data = fis.read(buf) ) != -1 ) {
			// new String(buf, 0, data) : buf의 0번인덱스부터 data까지의 문자열 객체로 생성
			System.out.print(new String(buf, 0, data));
			System.out.println(data);
		}
		
		System.out.println("========= read(byte[] buf, int start, int len) 이용해 읽기");
		fis = new FileInputStream("src/ex01_inputstream/InputStreamEx01.java");
		buf = new byte[fis.available()+10];
		buf[0] = 'A';
		
		while( (data = fis.read(buf, 1, buf.length-1) ) != -1 ) {
			System.out.print(new String(buf, 0, data));
		}
	}
}
package ex06_objectStream;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;

/*
 * ObjectOutputStream을 통해 객체를 저장한 Object.ser 파일 읽기
 */
public class ObjectInputStreamEx01 {
	public static void main(String[] args) throws IOException, ClassNotFoundException {
		// ois 스트림 : object.ser 파일에서 객체를 읽을 수 있는 스트림
		ObjectInputStream ois =  new ObjectInputStream(new FileInputStream("object.ser"));
		Customer c1 = (Customer)ois.readObject();
//		Customer c2 = (Customer)ois.readObject();
		Object c2 = ois.readObject();
		System.out.println(c1);
		System.out.println(c2);
		
	}
}
package ex06_objectStream;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;

/*
 * 상속관계에서의 직렬화
 */

public class ObjectInputStreamEx02 {
	public static void main(String[] args) throws IOException, ClassNotFoundException{
		ObjectInputStream ois = new ObjectInputStream(new FileInputStream("object2.ser"));
		
		User n1 = (User)ois.readObject();
		User n2 = (User)ois.readObject();
		
		System.out.println(n1);
		System.out.println(n2);
		ois.close();
	}
}
