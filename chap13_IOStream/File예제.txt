package ex07_other;

import java.io.File;
import java.io.IOException;

/*
 * c:/Windows 폴더의 하위 폴더/파일 개수와 파일 크기의 합
 */
public class Exam01 {
	public static void main(String[] args) {
		String path = "C:/Windows";
		File f1 = new File(path);
		String[] files = f1.list();
		int folderNums = 0;
		int fileNums = 0;
		int fileByteSum = 0;
		
		for(String f : files) {
			File f2 = new File(path, f);
			if(f2.isDirectory()) {
				folderNums++;
			} else if(f2.isFile()) {
				fileNums++;
				fileByteSum += f2.length();
			}
		}
		System.out.printf("%s 경로 내 정보\n", path);
		System.out.printf("폴더 개수 : %d\n", folderNums);
		System.out.printf("파일 개수 : %d\n파일 크기의 합 : %,dbyte\n", fileNums, fileByteSum);
	}

}
package ex07_other;

/*
 * File 클래스
 *  - 파일이나 폴더의 정보를 관리하는 클래스
 *  - new File(String s) : 경로
 *  - new File(String s1, String s2) : 하위경로
 *  - 윈도우 : \\(역슬래시), /
 *    리눅스 : /
 *  
 */
import java.io.File;

public class FileEx01 {
	public static void main(String[] args) {
		System.out.println("File.separator : " + File.separator);
		String filePath = "c:/";
		File f1 = new File(filePath);
		// f1 : "c:/ 폴더의 정보"
		String[] files = f1.list();
		// f1.list() : 하위 폴더/파일의 이름 리턴
		for(String f : files) { // f : c:/ 폴더 하위 목록의 이름
			File f2 = new File(filePath, f);
			if(f2.isDirectory()) {
				System.out.printf("%s : 디렉토리\n", f);
			} else {
				// f.length() : 파일의 크기
				System.out.printf("%s : 파일(%,d bytes)\n", f, f.length());
			}
		}
	}
}
package ex07_other;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;

/*
 * File 클래스의 주요 메서드
 * 		String getAbsolutePath() : 절대 경로
 * 		boolean mkdir() : 하위 폴더 1개 생성 / 성공시 true 실패시 false
 * 		boolean mkdirs() : 하위 폴더 여러개 생성 / 성공시 true 실패시 false
 * 		boolean createNewFile() : 파일 생성 / 성공시 true 실패시 false
 * 		String getName() : 파일 이름
 * 		long length() : 파일의 크기(byte 단위)
 * 		boolean exists() : 파일의 존재 여부
 * 		boolean renameTo(File f1) : 파일의 이름을 f1 이름으로 변경
 * 		long lastModified() : 파일의 최종 수정시각을 밀리초로 리턴
 * 		boolean delete() : 파일 삭제
 */
public class FileEx02 {
	public static void main(String[] args) throws IOException {
		File f1 = new File("c:/temp1");
		System.out.printf("%s 폴더 생성 : %b\n", f1.getAbsolutePath(), f1.mkdir());
		File f2 = new File("c:/temp1/test.txt");
		System.out.printf("%s 파일 생성 : %b\n", f2.getAbsolutePath(), f2.createNewFile());
		System.out.printf("파일 이름 : %s, 파일크기 : %,d\n", f2.getName(), f2.length());
		
		File f3 = new File("c:/temp1/test2.txt");
		
		if(f3.exists()) {
			System.out.println(f3.getName() + " 파일 존재");
		} else {
			System.out.println(f3.getName() + " 파일은 없음");
		}
		f2.renameTo(f3);
		SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		System.out.println("파일의 최종 수정시간 : " + df.format(f3.lastModified()));
		System.out.printf("%s 파일 삭제 : %b\n", f3.getName(), f3.delete());
		System.out.printf("%s 디렉토리 삭제 : %b\n", f1.getName(), f1.delete());
	}
}package ex07_other;
/*
 * 
 */
public class FileEx03 {
	public static void main(String[] args) {
		
	}
}package ex07_other;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.util.Vector;

public class SequenceStreamEx01 {

	public static void main(String[] args) throws IOException {
		File f = new File("src/ex07_other");
		String[] files = f.list();
		Vector<InputStream> v = new Vector<>();
		for(String file : files) {
			File f2 = new File(f, file);
			if(f2.isFile()) {
				v.add(new FileInputStream(f2));
			}
		}
		SequenceInputStream s = new SequenceInputStream(v.elements());
		FileOutputStream fos = new FileOutputStream("File예제.txt");
		int data = 0;
		byte[] buf = new byte[8096];
		while( (data = s.read(buf) ) != -1 ) {
			fos.write(buf, 0, data);
		}
		fos.flush();
		fos.close();
		s.close();
		
	}

}
